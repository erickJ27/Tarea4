@page "/RInscripcion/{InscripcionId:int}"
<h3>Registro de inscripcion</h3>


<EditForm Model="inscripciones" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="InscripcionId">InscripcionId</label>
        <InputNumber @bind-Value="inscripciones.InscripcionId" class="form-control" />
        <button type="button" @onclick="Buscar" class="btn btn-primary">Buscar</button>
    </div>
    <div class="form-group">
        <label for="Semestre">Semestre</label>
        <InputText @bind-Value="inscripciones.Semestre" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Fecha">Fecha</label>
        <InputDate @bind-Value="inscripciones.Fecha" class="form-control" />
    </div>
    <div class="form-group">
        <label for="EstudianteId">Estudiante</label>
        <InputSelect @bind-Value="EstudianteSeleccionado" class="form-control" @onchange="CargarEstudiante" @onclick="CargarEstudiante">
            <option value="" disabled selected>Seleccione un Estudiante</option>
            @foreach (var item in ListaEstudiante)
            {
                <option value="@item.EstudianteId">@item.Nombres</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Limite">Limite de creditos</label>
        <InputNumber @bind-Value="inscripciones.Limite" @oninput="Calcular" @onfocusin="Calcular" @onfocusout="Calcular" class="form-control" />
    </div>
    <div class="form-group ">
        <div class="form-row">
            <div class="form-group col-mb-3">
                <label>Asignatura</label>
                <InputSelect @bind-Value="AsignaturaSeleccionada" class="form-control" @onchange="CargarAsignatura" @onclick="CargarAsignatura">
                    <option value="" disabled selected>Seleccione una asignatura</option>
                    @foreach (var item in ListaAsignatura)
                    {
                        <option value="@item.AsignaturaId">@item.Descripcion</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group col-mb-3">
                <label>Creditos</label>
                <InputNumber @bind-Value="Creditos" readonly="true" class="form-control">

                </InputNumber>
            </div>
            <div class="form-group col-mb-3">
                <label>Precio</label>
                <InputNumber @bind-Value="Precio" class="form-control">

                </InputNumber>
            </div>
            
            
                <button type="button"class="btn btn-primary col-mb-3" @onclick="AgregarAsignatura">Agregar</button>

        </div>
    </div>
    <div class="form-group">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Descripcion</th>
                    <th>Credito</th>
                    <th>Subtotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in inscripciones.Detalles)
                {
                    <tr>
                        <th>@item.AsignaturaId</th>
                        <th>@item.DescripcionAsignatura</th>
                        <th>@item.Creditos</th>
                        <th>@item.SubTotal</th>
                        <th><button type="button" class="btn btn-outline-danger btn-sm" @onclick="(()=> EliminarAsigantura(item))">Eliminar</button></th>

                    </tr>
                }
            </tbody>
        </table>
    </div>


    <div class="form-group">
        <label for="Tomados">Tomados</label>
        <InputNumber @bind-Value="inscripciones.Tomados" @oninput="Calcular" @onfocusin="Calcular" @onfocusout="Calcular" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Disponibles">Disponibles</label>
        <InputNumber @bind-Value="inscripciones.Disponibles" readonly="true" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Monto">Monto</label>
        <InputNumber @bind-Value="inscripciones.Monto" readonly="true" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Balance">Balance</label>
        <InputNumber @bind-Value="inscripciones.Balance" readonly="true" class="form-control" />
    </div>

    <h6>@Mensaje</h6>
    <ValidationSummary />
    <div class="form-group col-md-6">
        <button type="button" @onclick="Limpiar" class="btn btn-primary">Nuevo</button>
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" @onclick="Eliminar" class="btn btn-danger">Eliminar</button>

    </div>

</EditForm>
@code {
    [Parameter]
    public int InscripcionId { get; set; }

    public Inscripciones inscripciones = new Inscripciones();
    public string Mensaje;

    EstudianteController estudiantecontrol = new EstudianteController();
    AsignaturaController asignaturacontrol = new AsignaturaController();

    public List<Estudiantes> ListaEstudiante = new List<Estudiantes>();
    public List<Asignaturas> ListaAsignatura = new List<Asignaturas>();

    private string EstudianteSeleccionado { get; set; }
    private string AsignaturaSeleccionada { get; set; }
    private decimal Precio { get; set; }
    private decimal Total { get; set; }
    private int Credito { get; set; }
    private decimal SubTotal { get; set; }

    private int Creditos { get; set; }

    private Estudiantes Estudiante { get; set; }
    private Asignaturas Asignatura { get; set; }


    protected override void OnInitialized()
    {
        ListaAsignatura = asignaturacontrol.GetList(e => true);
        ListaEstudiante = estudiantecontrol.GetList(e => true);
        Estudiante = new Estudiantes();
        Asignatura = new Asignaturas();

        if (InscripcionId > 0)
        {
            inscripciones.InscripcionId = InscripcionId;
            Buscar();
        }
    }
    private void Limpiar()
    {
        EstudianteSeleccionado = string.Empty;
        inscripciones = new Inscripciones();
    }

    private void CargarEstudiante()
    {
        try
        {
            Estudiante = estudiantecontrol.Buscar(Convert.ToInt32(EstudianteSeleccionado));
        }
        catch (Exception)
        {


        }

    }
    private void CargarAsignatura()
    {
        try
        {
            Asignatura = asignaturacontrol.Buscar(Convert.ToInt32(AsignaturaSeleccionada));
        }
        catch (Exception)
        {


        }

    }

    private void Guardar()
    {
        InscripcionController db = new InscripcionController();
        inscripciones.EstudianteId = Convert.ToInt32( EstudianteSeleccionado);

        if (db.Guardar(inscripciones))
        {
            Limpiar();
            Mensaje = "Guardado";
        }

        else
        {
            Mensaje = "No se pudo guardar";
        }


    }

    private void Buscar()
    {
        InscripcionController db = new InscripcionController();
        Inscripciones inscripciontemp;

        if (inscripciones.InscripcionId > 0)
        {
            inscripciontemp = db.Buscar(inscripciones.InscripcionId);

            if (inscripciontemp != null)
                inscripciones = inscripciontemp;
            else
                Mensaje = "inscripcion no encontrada";
        }

    }
    private void Eliminar()
    {
        InscripcionController db = new InscripcionController();

        if (inscripciones.InscripcionId != 0)
        {
            if (db.Buscar(inscripciones.InscripcionId) != null)
            {
                db.Eliminar(inscripciones.InscripcionId);
                Mensaje = "Eliminado con exito";
                Limpiar();

            }
            else
            {
                Mensaje = "No se puede eliminar una inscripcion que no existe";
            }

        }
        else
        {
            Mensaje = "Seleccione un id";
        }
    }
    private void Calcular()
    {

        inscripciones.Disponibles = inscripciones.Limite - inscripciones.Tomados;

    }
    private void AgregarAsignatura()
    {
        if(inscripciones.Limite <= 0)
        {
            Mensaje = "Los créditos exceden a el límite admitido";
        }
        else
        {
            if (AsignaturaSeleccionada ==null)
            {
                Mensaje = "Debes seleccionar una asignatura";
            }
            else
            {
                if (Precio <= 0)
                {
                    Mensaje = "El precio es obligatorio";
                }
                else
                {
                    if (inscripciones.Detalles.Any(i => i.AsignaturaId == Asignatura.AsignaturaId))
                    {
                        Mensaje = "Esta Asignatura ya esta agregada";
                    }
                    else
                    {
                        Mensaje = "";
                        inscripciones.Detalles.Add(new InscripcionesDetalle()
                        {
                            InscripcionId = inscripciones.InscripcionId,
                            AsignaturaId = Asignatura.AsignaturaId,
                            DescripcionAsignatura = Asignatura.Descripcion,
                            Creditos = Asignatura.Creditos,
                            SubTotal = (Asignatura.Creditos * Precio)
                        });
                        Asignatura = new Asignaturas();

                        int total = 0;

                        foreach (var item in inscripciones.Detalles)
                        {
                            Total += item.SubTotal;
                            Credito += item.Creditos;

                            
                        }

                        inscripciones.Monto = total;
                        inscripciones.Tomados = Credito;
                    }
                }
            }
        }

    }
    private void EliminarAsigantura(InscripcionesDetalle detalle)
    {
        inscripciones.Detalles.Remove(detalle);
    }

}
